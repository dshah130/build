{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["App","props","state","player1","player2","currentPlayer","board","gameOver","message","play","bind","r","row","c","push","this","setState","result","checkAll","togglePlayer","checkVertical","checkHorizontal","checkDraw","initBoard","className","onClick","map","i","React","Component","Row","cell","value","columnIndex","Cell","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9f79e3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    //initializing variables\n    this.state = {\n      player1: 1,\n      player2: 2,\n      currentPlayer: null,\n      board: [],\n      gameOver: false,\n      message: ''\n    };\n    \n    //allows play function to be with app component \n    this.play = this.play.bind(this);\n  }\n  \n  //starts new game\n  initBoard() {\n\n    //creates a 6x7 board\n    let board = [];\n    for (let r = 0; r < 6; r++) {\n      let row = [];\n      for (let c = 0; c < 7; c++) { row.push(null) }\n      board.push(row);\n    }\n\n    //sets the overall board\n    this.setState({\n      board,\n      currentPlayer: this.state.player1,\n      gameOver: false,\n      message: ''\n    });\n  }\n  \n  togglePlayer() {\n    return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\n  }\n  \n  play(c) {\n    if (!this.state.gameOver) {\n      // Place piece on board\n      let board = this.state.board;\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.currentPlayer;\n          break;\n        }\n      }\n\n      // Check status of board\n      let result = this.checkAll(board);\n      if (result === this.state.player1) {\n        this.setState({ board, gameOver: true, message: 'Player 1 (red) wins!' });\n      } else if (result === this.state.player2) {\n        this.setState({ board, gameOver: true, message: 'Player 2 (yellow) wins!' });\n      } else if (result === 'draw') {\n        this.setState({ board, gameOver: true, message: 'Draw game.' });\n      } else {\n        this.setState({ board, currentPlayer: this.togglePlayer() });\n      }\n    } else {\n      this.setState({ message: 'Game over. Please start a new game.' });\n    }\n  }\n\n  //Check only if row is 3 or greater\n  checkVertical(board) {\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c] &&\n              board[r][c] === board[r - 2][c] &&\n              board[r][c] === board[r - 3][c]) {\n            return board[r][c];    \n          }\n        }\n      }\n    }\n  }\n  \n  // Check only if column is 3 or less\n  checkHorizontal(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r][c + 1] && \n              board[r][c] === board[r][c + 2] &&\n              board[r][c] === board[r][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n  \n  //checks if the board has no possible solutions therfore it is a draw\n  checkDraw(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] === null) {\n          return null;\n        }\n      }\n    }\n    return 'draw';    \n  }\n  \n  //checks if there is a player that won vertically, horizontally, or if there was a draw\n  checkAll(board) {\n    return this.checkVertical(board) || this.checkHorizontal(board) || this.checkDraw(board);\n  }\n  \n  componentWillMount() {\n    this.initBoard();\n  }\n  \n  //function to click the buttons on the screen \n  render() {\n    return (\n      <div>\n        <div className=\"button\" onClick={() => {this.initBoard()}}>New Game</div>\n        \n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} />))}\n          </tbody>\n        </table>\n        \n        <p className=\"message\">{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\n//function for the row\nconst Row = ({ row, play }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\n    </tr>\n  );\n};\n\n//function to see whether the player will be yellow or red\nconst Cell = ({ value, columnIndex, play }) => {\n  let color = 'white';\n  if (value === 1) {\n    color = 'red';\n  } else if (value === 2) {\n    color = 'yellow';\n  }\n  \n  //returns the colour when you click on the board\n  return (\n    <td>\n      <div className=\"cell\" onClick={() => {play(columnIndex)}}>\n        <div className={color}></div>\n      </div>\n    </td>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//allowing the app to render from the app.js file\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root'));\n\n\n"],"sourceRoot":""}